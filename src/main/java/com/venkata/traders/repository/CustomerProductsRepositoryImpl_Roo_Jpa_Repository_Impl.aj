// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.venkata.traders.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.venkata.traders.domain.Customer;
import com.venkata.traders.domain.CustomerProducts;
import com.venkata.traders.domain.QCustomerProducts;
import com.venkata.traders.repository.CustomerProductsRepositoryCustom;
import com.venkata.traders.repository.CustomerProductsRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect CustomerProductsRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CustomerProductsRepositoryImpl implements CustomerProductsRepositoryCustom;
    
    declare @type: CustomerProductsRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerProductsRepositoryImpl.PRODUCT = "product";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerProductsRepositoryImpl.QUANTITY = "quantity";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerProductsRepositoryImpl.TOTAL_PRODUCT_TAX = "totalProductTax";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerProductsRepositoryImpl.FINAL_PRODUCT_TAX = "finalProductTax";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerProductsRepositoryImpl.CUSTOMER = "customer";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerProducts> CustomerProductsRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomerProducts customerProducts = QCustomerProducts.customerProducts;
        
        JPQLQuery<CustomerProducts> query = from(customerProducts);
        
        Path<?>[] paths = new Path<?>[] {customerProducts.product,customerProducts.quantity,customerProducts.totalProductTax,customerProducts.finalProductTax,customerProducts.customer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCT, customerProducts.product)
			.map(QUANTITY, customerProducts.quantity)
			.map(TOTAL_PRODUCT_TAX, customerProducts.totalProductTax)
			.map(FINAL_PRODUCT_TAX, customerProducts.finalProductTax)
			.map(CUSTOMER, customerProducts.customer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customerProducts);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerProducts> CustomerProductsRepositoryImpl.findByCustomer(Customer customer, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomerProducts customerProducts = QCustomerProducts.customerProducts;
        
        JPQLQuery<CustomerProducts> query = from(customerProducts);
        
        Assert.notNull(customer, "customer is required");
        
        query.where(customerProducts.customer.eq(customer));
        Path<?>[] paths = new Path<?>[] {customerProducts.product,customerProducts.quantity,customerProducts.totalProductTax,customerProducts.finalProductTax,customerProducts.customer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCT, customerProducts.product)
			.map(QUANTITY, customerProducts.quantity)
			.map(TOTAL_PRODUCT_TAX, customerProducts.totalProductTax)
			.map(FINAL_PRODUCT_TAX, customerProducts.finalProductTax)
			.map(CUSTOMER, customerProducts.customer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customerProducts);
    }
    
}
