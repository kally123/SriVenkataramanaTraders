// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.venkata.traders.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.venkata.traders.domain.CustomerProducts;
import com.venkata.traders.domain.Product;
import com.venkata.traders.domain.QProduct;
import com.venkata.traders.repository.ProductRepositoryCustom;
import com.venkata.traders.repository.ProductRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ProductRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ProductRepositoryImpl implements ProductRepositoryCustom;
    
    declare @type: ProductRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.PRODUCT_NAME = "productName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.PRODUCT_DESCRIPTION = "productDescription";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.APPLICABLE_FROM = "applicableFrom";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.HSN_SAC = "hsnSac";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.TAXABILITY = "taxability";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.PRODUCT_QUANTITY = "productQuantity";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.CUSTOMER_PRODUCTS = "customerProducts";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Path<?>[] paths = new Path<?>[] {product.productName,product.productDescription,product.applicableFrom,product.hsnSac,product.taxability,product.productQuantity,product.customerProducts};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCT_NAME, product.productName)
			.map(PRODUCT_DESCRIPTION, product.productDescription)
			.map(APPLICABLE_FROM, product.applicableFrom)
			.map(HSN_SAC, product.hsnSac)
			.map(TAXABILITY, product.taxability)
			.map(PRODUCT_QUANTITY, product.productQuantity)
			.map(CUSTOMER_PRODUCTS, product.customerProducts);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerProducts
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findByCustomerProducts(CustomerProducts customerProducts, GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Assert.notNull(customerProducts, "customerProducts is required");
        
        query.where(product.customerProducts.eq(customerProducts));
        Path<?>[] paths = new Path<?>[] {product.productName,product.productDescription,product.applicableFrom,product.hsnSac,product.taxability,product.productQuantity,product.customerProducts};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCT_NAME, product.productName)
			.map(PRODUCT_DESCRIPTION, product.productDescription)
			.map(APPLICABLE_FROM, product.applicableFrom)
			.map(HSN_SAC, product.hsnSac)
			.map(TAXABILITY, product.taxability)
			.map(PRODUCT_QUANTITY, product.productQuantity)
			.map(CUSTOMER_PRODUCTS, product.customerProducts);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
}
