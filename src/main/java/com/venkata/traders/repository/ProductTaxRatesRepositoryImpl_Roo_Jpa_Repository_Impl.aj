// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.venkata.traders.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.venkata.traders.domain.Product;
import com.venkata.traders.domain.ProductTaxRates;
import com.venkata.traders.domain.QProductTaxRates;
import com.venkata.traders.repository.ProductTaxRatesRepositoryCustom;
import com.venkata.traders.repository.ProductTaxRatesRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ProductTaxRatesRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ProductTaxRatesRepositoryImpl implements ProductTaxRatesRepositoryCustom;
    
    declare @type: ProductTaxRatesRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductTaxRatesRepositoryImpl.TAX_SLAB = "taxSlab";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductTaxRatesRepositoryImpl.TAX_RATE = "taxRate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductTaxRatesRepositoryImpl.PRODUCT = "product";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ProductTaxRates> ProductTaxRatesRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QProductTaxRates productTaxRates = QProductTaxRates.productTaxRates;
        
        JPQLQuery<ProductTaxRates> query = from(productTaxRates);
        
        Path<?>[] paths = new Path<?>[] {productTaxRates.taxSlab,productTaxRates.taxRate,productTaxRates.product};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TAX_SLAB, productTaxRates.taxSlab)
			.map(TAX_RATE, productTaxRates.taxRate)
			.map(PRODUCT, productTaxRates.product);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, productTaxRates);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param product
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ProductTaxRates> ProductTaxRatesRepositoryImpl.findByProduct(Product product, GlobalSearch globalSearch, Pageable pageable) {
        
        QProductTaxRates productTaxRates = QProductTaxRates.productTaxRates;
        
        JPQLQuery<ProductTaxRates> query = from(productTaxRates);
        
        Assert.notNull(product, "product is required");
        
        query.where(productTaxRates.product.eq(product));
        Path<?>[] paths = new Path<?>[] {productTaxRates.taxSlab,productTaxRates.taxRate,productTaxRates.product};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TAX_SLAB, productTaxRates.taxSlab)
			.map(TAX_RATE, productTaxRates.taxRate)
			.map(PRODUCT, productTaxRates.product);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, productTaxRates);
    }
    
}
